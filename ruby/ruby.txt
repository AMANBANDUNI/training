********************************************************************************Ruby *******************************************************************************
1) Intro.

Ruby is a scripting language designed by Yukihiro Matsumoto, also known as Matz.

Ruby is a perfect Object Oriented Programming Language. The features of the object-oriented programming language include −

Data Encapsulation
Data Abstraction
Polymorphism
Inheritance







rvm (ruby version manager) => Uses to manage the different versions of ruby.


$rvm list =>  To list out all the ruby versions installed in our system.


$rvm install ruby-<version_no.> / $rvm install <version_no._of_ruby> => To install the specific version of ruby into our system.


$rvm use ruby-<version_no._of_ruby> / rvm use <version_no._of_ruby> => To use the specific version of ruby in our system.


$rvm reload => TO reload to the latest version of rvm in our system if installed.


$irb (Interactive Ruby Shell) => Its a ruby interpreter/interactive programming environment that comes with Ruby, where you can run your ruby code line by line.





2) Types of Variables in Ruby:


Variables in a Ruby Class
Ruby provides four types of variables −

	a) Local Variables − Local variables are the variables that are defined in a method. Local variables are not available outside the method.
	You will see more details about method in subsequent chapter. Local variables begin with a lowercase letter or _.
	

	b) Instance Variables − Instance variables are available across methods for any particular instance or object. 
	That means that instance variables change from object to object. Instance variables are preceded by the at sign (@) followed by the variable name.


	c) Class Variables − Class variables are available across different objects. A class variable belongs to the class and is a characteristic of a class. 
	They are preceded by the sign @@ and are followed by the variable name.

	d) Global Variables − Class variables are not available across classes. If you want to have a single variable, which is available across classes, 
	you need to define a global variable. The global variables are always preceded by the dollar sign ($).






3) Datatypes in Ruby:

There are a lot of datatypes in ruby , some most common datatypes are:
Note: Since Ruby is a perfect object oriented language. Here all things works with object and classes, For example: all the info. of datatypes are stored in
thier own class.

a) string
b) integer
c) floating points
d) Boolean
e) nil





4) skip characters :

a) '\' => backslash is a skip character which tells the interpreter that skip the next character syntax and take is as a string.
b) '\n' => To tells the interpreter that you want to print the rest of the text in next line and skip the rest of the line.
						or
	To tell the interpreter that you want to skip printing in the rest of the line, instead print in the next line.

c) '\t' => To give tab space.






5) Working with strings : 

	string methods: (<sring_carrying_Variable_name>.methods / "any_string".methods) => This will list out all the methods you can call in this variable or string.
			There are a lot of methods, through which you can operate in string. Some of them are:
			i) .upcase() => To make all the letters in upper case of a string.
			ii) .downcase() => To make all the letters in down case of a string.
			iii) .size() => To give you the size of the string.
			iv) .length() => To give the legnth of the string.
			v) .include() => To check weather a string of words available in the given variable of string or not , by returning a true or false. 
					e.g) variable_name.include? "string of words you want to check" 
			vi) .index() => It gives the index number of where a character or string starts.
					e.g) variable_name.index("character or string which you want to check") 
			etc.


6) Working with Math/numbers :

	methods with numbers: 
				i) .to_S => To convert a number into a string.
					e.g)	num=5 
						puts ("my fav num =" + num.to_s)
						o/p = my fav num =5

				ii) .abs() => Used to bring the absolute/postive number.
					e.g)	 num= -20
						 puts num.abs()
						 o/p = 20
				iii) .round() => Used to roundOff the number if it has decimal values in it , then using round function we can round it to the closest whole no.
					e.g)	num= 20.487
						puts num.round()
						o/p = 20
				iv) .ceil() => ceil function is just like the round() fn , but instead of bringing the closest value , it brings the maximum/ceiling value of no.
					e.g)	num=20.1
						puts num.ceil()
						o/p = 21
				v) floor() => floor function is just like the round() fn , but instead of bringing the closest value , it brings the minimum/floor value of no.
					e.g)	num=20.9
						puts num.ceil()
						o/p = 20
				# Some special methods in ruby using the math class.
				
				vi) Math.sqrt() => The sqrt function of the Math class Brings the sqrt of the number.
					e.g)	puts Math.sqrt(36)
						o/p: 6.0
				vi) Math.log() => The log function of the Math class Brings the Log value of the number.
					e.g)	puts Math.log(1)
						o/p: 0.0

				

	TypeCasting / premitive conversion of integer to float:

	int/int		=	int		|	int + int	=	int
	float/float	=	float		|	float + float	=	float
	float/int	=	float		|	float + int	=	float
	int/float	=	float		|	int + float	=	float










6) Inbuilt Methods : Inbuilt methods are the pre-defined methods , which we can call anytime in our programs.

	 methods: (<sring_carrying_Variable_name>.methods / "any_string".methods) => This will list out all the methods you can call in this variable or string.
			There are a lot of methods, through which you can operate in string. Some of them are:
			i) .upcase() => To make all the letters in upper case of a string.
			ii) .downcase() => To make all the letters in down case of a string.
			iii) .size() => To give you the size of the string.
			iv) .length() => To give the legnth of the string.
			v) .include() => To check weather a string of words available in the given variable of string or not , by returning a true or false. 
					e.g) variable_name.include? "string of words you want to check" 
			vi) .index() => It gives the index number of where a character or string starts.
					e.g) variable_name.index("character or string which you want to check")
			vii) .to_S => To convert a number into a string.
					e.g)	num=5 
						puts ("my fav num =" + num.to_s)
						o/p = my fav num =5

			viii) .abs() => Used to bring the absolute/postive number.
					e.g)	 num= -20
						 puts num.abs()
						 o/p = 20
			ix) .round() => Used to roundOff the number if it has decimal values in it , then using round function we can round it to the closest whole no.
					e.g)	num= 20.487
						puts num.round()
						o/p = 20
			x) .ceil() => ceil function is just like the round() fn , but instead of bringing the closest value , it brings the maximum/ceiling value of no.
					e.g)	num=20.1
						puts num.ceil()
						o/p = 21
			xi) floor() => floor function is just like the round() fn , but instead of bringing the closest value , it brings the minimum/floor value of no.
					e.g)	num=20.9
						puts num.ceil()
						o/p = 20
				# Some special methods in ruby using the math class.
				
			xii) Math.sqrt() => The sqrt function of the Math class Brings the sqrt of the number.
					e.g)	puts Math.sqrt(36)
						o/p: 6.0
			xiii) Math.log() => The log function of the Math class Brings the Log value of the number.
					e.g)	puts Math.log(1)
						o/p: 0.0
	

			xiv) .to_a => used to covert into an array.
			xv) .to_i => to convert into an integer.
			xvi) .to_f => to covert into float


7) Operators:


7.1) Comparison Operators
# Some new Comparison Operators

Assume variable a holds 10 and variable b holds 20, then −

Operator	|	Description						|	Example
		|								|
<=>		|Combined comparison operator. Returns 0 if first operand equals|
		| second, 1 if first operand is greater than the second and -1	|
		| if first operand is less than the second.			|	(a <=> b) returns -1.
		|								|
		|								|
===		|Used to test equality within a when clause of a case statement.|	(1...10) === 5 returns true.
		|								|
		|								|			
.eql?		|True if the receiver and argument have both the same type and	|
		| equal values.							|	1 == 1.0 returns true, but 1.eql?(1.0) is false.
		|								|
equal?		|True if the receiver and argument have the same object id.	|	if aObj is duplicate of bObj then aObj == bObj is
		|								|	 true, a.equal?bObj is false but
		|								|	 a.equal?aObj is true.





7.2) Parallel Assignment Operators

a,b,c = 10, 20 , 30 [It will assign a=10, b=20, c=30]

Parallel assignment is also useful for swapping the values held in two variables −

e.g.) a,b = b,c



7.3) Ruby Bitwise Operators: 

Bitwise operator works on bits and performs bit by bit operation.

Assume if a = 60; and b = 13; now in binary format they will be as follows −

 a    =  0011 1100
 b    =  0000 1101
 ------------------
 a&b  =  0000 1100
 a|b  =  0011 1101
 a^b  =  0011 0001
 ~a   =  1100 0011


The following Bitwise operators are supported by Ruby language.


Operator|	Description								|	Example
&	|Binary AND Operator copies a bit to the result if it exists in both operands.	| (a & b) will give 12, which is 0000 1100

|	|Binary OR Operator copies a bit if it exists in either operand.		| (a | b) will give 61, which is 0011 1101

^	|Binary XOR Operator copies the bit if it is set in one operand but not both.	| (a ^ b) will give 49, which is 0011 0001

~	|Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.| (~a ) will give -61, which is 1100 0011 in
	|										|  2's complement form due to a signed binary number.

<<	|Binary Left Shift Operator. The left operands value is moved left by the number|
	| of bits specified by the right operand.					|a << 2 will give 240, which is 1111 0000

>>	|Binary Right Shift Operator. The left operands value is moved right by the	| 
	|number of bits specified by the right operand.					|a >> 2 will give 15, which is 0000 1111





7.4) Ruby Ternary Operator

?: => it first evaluates an expression for a true or false value and then executes one of the two given statements depending upon the
	 result of the evaluation. The conditional operator has this syntax −

Operator	|	Description	 |	Example

? :		| Conditional Expression |	If Condition is true ? Then value X : Otherwise value Y



7.5) Ruby Range Operators

# Sequence ranges in Ruby are used to create a range of successive values - consisting of a start value, an end value, and
#  a range of values in between.
# In Ruby, these sequences are created using the ".." and "..." range operators. The two-dot form creates an inclusive range,
#  while the three-dot form creates a range that excludes the specified high value.


Operator	|	Description							|	Example

..		| Creates a range from start point to end point inclusive.		|1..10 Creates a range from 1 to 10 inclusive.
...		| Creates a range from start point to end point exclusive.		|1...10 Creates a range from 1 to 9.






8) Comments

	a) Single line comment is done by using '#'. 

	b) Multiple line comment is done by giving your statement in between. =begin <lines of statements....>  =end



9) Conditional Statements: (the more related data in the README.md file in Conditional_statement direcory)
	a) If else	/	if modifier
	b) elsif
	c) unless	/	unless modifier
	d) case


10) Loops : (the more related data is in the README.md file in loops directory)
	a) while	/	while modifier
	b) until	/	until modifier
	c) for
	


11) Methods:



12) Blocks:


13) Modules:
