1) Retrieving a Single Object
  Active Record provides several different ways of retrieving a single object.

1.1 find
  Using the find method, you can retrieve the object corresponding to the specified primary key that matches any supplied options. 
For example:

# Find the product with product id = 2.

> ap Product.find(2)

  The SQL equivalent of the above is:

  SELECT * FROM products WHERE (products.id = 2) LIMIT 1

  Note: The find method will raise an ActiveRecord::RecordNotFound exception if no matching record is found.

> ap Product.find([1,3])

  The SQL equivalent of the above is:

  SELECT * FROM products WHERE (products.id IN (1,3))

1.2 find_by
  Using the find method, you can retrieve the object corresponding to the specified primary key that matches any supplied options.
  For example:

# Find one product detail whose description = 'camera'
  > ap Product.find_by(description: "camera")

  This is equivalent to:
  > ap Product.where(description: "camera").take

  Note: The find method will not raise an ActiveRecord::RecordNotFound exception, if no matching record is found it will return nil.

  The find_by! method behaves exactly like find_by, except that it will raise ActiveRecord::RecordNotFound if no matching record is found. 
  For example:

  > ap Product.where(description: "description").take!	  ||	> ap Product.find_by!(description: "description")
 
  ActiveRecord::RecordNotFound



2) Conditions:

  The where method allows you to specify conditions to limit the records returned, representing the WHERE-part of the SQL statement. 
  Conditions can either be specified as a string, array, or hash.

  2.1) 
    > ap Product.where("description =?","camera")

    The SQL equivalent of the above is:
    SELECT "products".* FROM "products" WHERE (description ='camera')


    #or  
    > ap Product.where(description: "camera")
    #or
    > ap Product.where("description"=>"camera")

  2.2) AND, OR, NOT conditions

    > ap Product.where("description= :name OR category_id= :id",{name: "camera",id: 2})
    
    The SQL equivalent of the above is:
    SELECT "products".* FROM "products" WHERE (description= 'camera' OR category_id= 2)


    #or
    > ap Product.where(description: "camera").or(Product.where(category_id: 2))

    The SQL equivalent of the above is:
    SELECT "products".* FROM "products" WHERE ("products"."description" = $1 OR "products"."category_id" = $2)  
	[["description", "camera"], ["category_id", 2]]



    NOT Condition: It will list all the Products except the products with id=2 or 3.

    > ap Product.where.not(id: [2,3])
    
    The SQL equivalent of the above is:
    SELECT "products".* FROM "products" WHERE "products"."id" NOT IN ($1, $2)  [["id", 2], ["id", 3]]

# CLAUSES   

3) Ordering :
  Note: By default it order by id and in Ascending order.

  > ap Product.order(:created_at)
  The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY created_at
  #or
  > ap Product.order("created_at")
  The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY "products"."created_at" ASC

  You could specify ASC/DESC as well:

  > ap Product.order(created_at: :desc)
  The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY "products"."created_at" DESC

  > ap Product.order("created_at desc")
  The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY created_at desc




  Ordering by multiple fields:

    
    > ap Product.order(name: :asc,created_at: :desc)
    The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY "products"."name" ASC, "products"."created_at" DESC

    #or
    > ap Product.order(:name,created_at: :desc)
    The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY "products"."name" ASC, "products"."created_at" DESC

    #or
    > ap Product.order("name asc, created_at desc")
    The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY name asc, created_at desc
 
    #or
    > ap Product.order("name asc","created_at desc")
    The SQL equivalent of the above is: SELECT "products".* FROM "products" ORDER BY name asc, created_at desc

   

4) Selecting Specific Fields:

  By default, Model.find selects all the fields from the result set using select *.

  To select only a subset of fields from the result set, you can specify the subset via the select method.

  For e.g.) To select only name and description column.

  > ap Product.select(:name,:description)
  The SQL equivalent of the above is: SELECT "products"."name", "products"."description" FROM "products"

  #or
  > ap Product.select("name,description")
  The SQL equivalent of the above is: SELECT name,description FROM "products"



  4.1) Distinct
    If you would like to only grab a single record per unique value in a certain field, you can use distinct:


    > ap Product.select(:description).distinct
    #or
    > ap Product.select("description").distinct
    The SQL equivalent of the above is: SELECT DISTINCT "products"."description" FROM "products".


    Note: You can also remove the uniqueness constraint:
      
      # Returns unique description
      > ap query = Product.select(:description).distinct
      The SQL equivalent of the above is: SELECT DISTINCT "products"."description" FROM "products"
      
      # Returns all descriptions, even if there are duplicates
      > ap query.distinct(false)
      The SQL equivalent of the above is: SELECT "products"."description" FROM "products"


5) Limit and Offset:
  To apply LIMIT to the SQL fired by the Model.find, you can specify the LIMIT using limit and offset methods on the relation.

  You can use limit to specify the number of records to be retrieved, and use offset to specify the number of records to skip before 
  starting to return the records. For example

  > ap Product.limit(3)
  will return a maximum of 3 products and because it specifies no offset it will return the first 3 in the table.
  The SQL equivalent of the above is: SELECT "products".* FROM "products" LIMIT $1  [["LIMIT", 3]]

    
  Adding Offset:
  > ap Product.limit(3).offset(1)
  The SQL equivalent of the above is: SELECT "products".* FROM "products" LIMIT $1 OFFSET $2  [["LIMIT", 3], ["OFFSET", 1]]



6) Group:
  To apply a GROUP BY clause to the SQL fired by the finder, you can use the group method.
  
  For e.g.) To find out how many distinct categories there are:

  > ap Product.select("category_id, count('category_id')").group("category_id")
  The SQL equivalent of the above is: SELECT category_id, count('category_id') FROM "products" GROUP BY "products"."category_id"
  
  Output:
        [
	    [0] #<Product:0x00005579172e1d10> {
	                 "id" => nil,
	        "category_id" => 1,
	              "count" => 2
	    },
	    [1] #<Product:0x00005579172e1c20> {
	                 "id" => nil,
	        "category_id" => 2,
	              "count" => 2
	    }
	]

  #Another short query for this
  > ap Product.group('category_id').count
  The SQL equivalent of the above is: SELECT COUNT(*) AS count_all, "products"."category_id" AS products_category_id FROM "products" 
  GROUP BY "products"."category_id"
  
  Output:
	{
	    1 => 2,
	    2 => 2
	}



7) HAVING:
  SQL uses the HAVING clause to specify conditions on the GROUP BY fields. You can add the HAVING clause to the SQL fired by the 
  Model.find by adding the having method to the find.
 
  For example: 
  > ap Product.select("price").group('price').having("price>?",62000)
  The SQL equivalent of the above is: SELECT "products"."price" FROM "products" GROUP BY "products"."price" HAVING (price>62000)
  
  #or
  > ap Product.select("price as Total_cost").group('price').having("price>?",62000)
  The SQL equivalent of the above is: SELECT price as Total_cost FROM "products" GROUP BY "products"."price" HAVING (price>62000)


  > ap Product.select("category_id,sum(price) as total_cost").group("category_id").having("sum(price) > ?",62000)
  The SQL equivalent of the above is: SELECT category_id,sum(price) as total_cost FROM "products" GROUP BY "products"."category_id" 
				      HAVING (sum(price) > 62000)





8) LIKE: 
  Like clause is used to find data from the partial data.

  For Example: 
  > ap Product.where("name LIKE '%kon%'")
  The SQL equivalent of the above is: SELECT "products".* FROM "products" WHERE (name LIKE '%kon%')




9) Pluck:

  Pluck is used to extract the selected data in the form of array where as select extract the selected data in the form of ActiveRecord 
  Class.

  Note: The query will be the same, but the output will be different, as shown below.
  
  For Example:
  > ap Product.pluck(:id)
  The SQL equivalent of the above is: SELECT "products"."id" FROM "products"
  Output: 
  [
    [ 0] 3,
    [ 1] 4,
    [ 2] 5,
    [ 3] 1,
    [ 4] 2,
    [ 5] 6,
    [ 6] 7,
    [ 7] 12,
    [ 8] 13,
    [ 9] 15,
    [10] 16,
    [11] 17,
    [12] 18
  ]


  and in where also the background query will be the same for example:
  > ap Product.select(:id)
  The SQL equivalent of the above is: SELECT "products"."id" FROM "products"
  [
    [ 0] #<Product:0x00007f792c343148> {
        "id" => 3
    },
    [ 1] #<Product:0x00007f792c3091c8> {
        "id" => 4
    },
    [ 2] #<Product:0x00007f792c3090b0> {
        "id" => 5
    },
    [ 3] #<Product:0x00007f792c308fc0> {
        "id" => 1
    },
    [ 4] #<Product:0x00007f792c308ed0> {
        "id" => 2
    },
    [ 5] #<Product:0x00007f792c308db8> {
        "id" => 6
    },
    [ 6] #<Product:0x00007f792c308ca0> {
        "id" => 7
    },
    [ 7] #<Product:0x00007f792c308bd8> {
        "id" => 12
    },
    [ 8] #<Product:0x00007f792c308a98> {
        "id" => 13
    },
    [ 9] #<Product:0x00007f792c3089d0> {
        "id" => 15
    },
    [10] #<Product:0x00007f792c3088b8> {
        "id" => 16
    },
    [11] #<Product:0x00007f792c3087a0> {
        "id" => 17
    },
    [12] #<Product:0x00007f792c3086b0> {
        "id" => 18
    }
  ]





10) Scope: 
  Scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models. 
  With these scopes, you can use every method previously covered such as where, joins and includes. All scope bodies should return an 
  ActiveRecord::Relation or nil to allow for further methods (such as other scopes) to be called on it.

  8.1) To define a simple scope, we use the scope method inside the class, passing the query that we'd like to run when this scope is called:

  # Scope mentioned in the product model.
  scope :min_price, -> { where("price > 50000") }
  # query will be: 
  > ap Product.min_price

  8.2) Passing in arguments
  You can parse the value to the scope also.
  # Scope in the Model will be 
  scope :min_price, ->(amt) { where("price > ?",amt) }
  # Query will be 
  > ap Product.min_price(62000)



  
